{"version":3,"sources":["utils/RangeUtils.js","theme.js","App.js","serviceWorker.js","index.js"],"names":["RangeUtils","startContainer","startOffset","endContainer","endOffset","this","Range","setStart","setEnd","setEndAfter","fn","currentNode","nextSibling","applyToLeaves","parentNode","currentRange","setStartBefore","startNode","stack","length","pop","childNodes","applyToLeaf","i","push","highlightRange","range","newNode","document","createElement","setAttribute","surroundContents","highlightSelection","selection","window","getSelection","rangeCount","selectionRange","getRangeAt","apply","theme","createMuiTheme","useStyles","makeStyles","app","height","main","storyPanel","padding","spacing","textAlign","overflow","controlsPanel","storyButton","background","palette","primary","color","contrastText","margin","title","flexGrow","controlTab","StoryPanel","props","id","styles","Paper","className","React","Component","TabPanel","children","value","index","other","Typography","component","hidden","Box","p","ControlsPanel","state","selectedTab","Toolbar","Tabs","onChange","event","newValue","setState","Tab","label","NavigationBar","AppBar","position","IconButton","edge","aria-label","variant","FileImport","type","style","display","reader","FileReader","onload","e","html","target","result","getElementById","innerHTML","readAsText","files","htmlFor","Button","FileExport","onClick","App","Grid","container","item","xs","Boolean","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.33165213.chunk.js","sourcesContent":["/**\n * Utility functions for dealing with Range objects.\n */\n\n/**\n * Wrap a Range object and treat it as a sequence of leaf nodes over a DOM tree.\n */\nexport default class RangeUtils {\n  #startNode;\n  #startOffset;\n  #endNode;\n  #endOffset;\n  #startRange;\n\n  /**\n   * @param Range object\n   */\n  constructor({ startContainer, startOffset, endContainer, endOffset }) {\n    this.#startNode = startContainer;\n    this.#startOffset = startOffset;\n    this.#endNode = endContainer;\n    this.#endOffset = endOffset;\n\n    this.#startRange = new Range();\n    this.#startRange.setStart(startContainer, startOffset);\n    if (startContainer === endContainer) {\n      this.#startRange.setEnd(endContainer, endOffset);\n    } else {\n      this.#startRange.setEndAfter(startContainer);\n    }\n  }\n\n  /**\n   * Apply a function to each DOM leaf node within this range.\n   * @param fn (leafRangeObject) => {...}\n   */\n  apply(fn) {\n    // apply to the left-most range\n    fn(this.#startRange);\n\n    // recursively move to siblings/uncles until the end is found\n\n    if (this.#startNode === this.#endNode) {\n      // found the end already, nothing left to do\n      return;\n    }\n\n    // apply fn to every leaf node right of the #startNode\n    let currentNode = this.#startNode;\n    for (;;) {\n      if (currentNode.nextSibling) {\n        // apply to the next sibling and continue\n        currentNode = currentNode.nextSibling;\n        if (this.applyToLeaves(fn, currentNode)) {\n          // reach the end node, so don't continue\n          return;\n        }\n      } else {\n        // done applying to siblings... move up to parent and repeat\n        currentNode = currentNode.parentNode;\n      }\n    }\n  }\n\n  /**\n   * Apply a function to a single leaf DOM node.\n   * @param fn (leafRangeObject) => {...}\n   * @param currentNode leaf DOM node\n   * @returns true iff this node is the last node within the range\n   */\n  applyToLeaf(fn, currentNode) {\n    const currentRange = new Range();\n    currentRange.setStartBefore(currentNode);\n\n    if (currentNode !== this.#endNode) {\n      currentRange.setEndAfter(currentNode);\n      fn(currentRange);\n      return false;\n    }\n\n    currentRange.setEnd(this.#endNode, this.#endOffset);\n    fn(currentRange);\n    return true;\n  }\n\n  /**\n   * Apply a function to all leaf nodes under a DOM node.\n   * @param fn (leafRangeObject) => {...}\n   * @param startNode\n   * @returns true iff the last node within the range is a child of startNode\n   */\n  applyToLeaves(fn, startNode) {\n    const stack = [startNode];\n\n    while (stack.length !== 0) {\n      const currentNode = stack.pop();\n      if (currentNode.childNodes.length === 0) {\n        if (this.applyToLeaf(fn, currentNode)) {\n          return true;\n        }\n      } else {\n        for (let i = currentNode.childNodes.length - 1; i >= 0; i--) {\n          stack.push(currentNode.childNodes[i]);\n        }\n      }\n    }\n\n    return false;\n  }\n}\n\n/**\n * Highlights a Range object. The Range object MUST NOT span over multiple DOM nodes.\n */\nconst highlightRange = range => {\n  const newNode = document.createElement(\"div\");\n  newNode.setAttribute(\"style\", \"background-color: yellow; display: inline;\");\n  range.surroundContents(newNode);\n};\n\n/**\n * Highlights the current selection, regardless of whether it spans over multiple DOM\n * elements.\n */\nexport const highlightSelection = () => {\n  const selection = window.getSelection();\n  if (!selection.rangeCount) {\n    return;\n  }\n\n  const selectionRange = selection.getRangeAt(0);\n  const utils = new RangeUtils(selectionRange);\n  utils.apply(highlightRange);\n};\n","import { createMuiTheme, makeStyles } from \"@material-ui/core/styles\";\n\n// TODO: https://material.io/design/material-theming/implementing-your-theme.html#color\nexport const theme = createMuiTheme();\n\n// TODO: use BEM naming conventions for these\nexport const useStyles = makeStyles({\n  app: {\n    height: \"calc(100vh - 16px)\",\n    \"max-height\": \"calc(100vh - 16px)\"\n  },\n  main: {\n    \"max-height\": \"calc(100vh - 64px)\"\n  },\n  storyPanel: {\n    padding: theme.spacing(1),\n    textAlign: \"left\",\n    overflow: \"auto\",\n    height: \"calc(100vh - 96px)\",\n    \"max-height\": \"calc(100vh - 96px)\"\n  },\n  controlsPanel: {\n    height: \"calc(100vh - 152px)\",\n    \"max-height\": \"calc(100vh - 96px)\",\n    padding: theme.spacing(1)\n  },\n  storyButton: {\n    background: theme.palette.primary.main,\n    color: theme.palette.primary.contrastText,\n    margin: theme.spacing(1)\n  },\n  title: {\n    flexGrow: 1\n  },\n  controlTab: {}\n});\n","/**\n * Main entry point for the frontend.\n */\n\nimport React from \"react\";\nimport {\n  AppBar,\n  Box,\n  Button,\n  Grid,\n  IconButton,\n  Paper,\n  Tab,\n  Tabs,\n  Toolbar,\n  Typography\n} from \"@material-ui/core\";\nimport MenuIcon from \"@material-ui/icons/Menu\";\nimport { highlightSelection } from \"./utils/RangeUtils.js\";\nimport { useStyles, theme } from \"./theme.js\";\n\n/**\n * Panel used to display an HTML story.\n */\nclass StoryPanel extends React.Component {\n  render() {\n    const { id, styles } = this.props;\n    const { storyPanel } = styles;\n\n    return (\n      <Paper id={id} className={storyPanel}>\n        Select a story\n      </Paper>\n    );\n  }\n}\n\n/**\n * Stub class for displaying a tab panel. This is used for the Labels, Shortcuts,\n * and Search panels.\n */\nconst TabPanel = ({ children, value, index, ...other }) => (\n  <Typography component=\"div\" hidden={value !== index} {...other}>\n    <Box p={3}>{children}</Box>\n  </Typography>\n);\n\n/**\n * Panel used to display control options. This panel contains three tabs:\n *   * Labels -\n *   * Shortcuts -\n *   * Search -\n */\nclass ControlsPanel extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      selectedTab: 0\n    };\n  }\n\n  render() {\n    const { controlsPanel, controlTab } = this.props.styles;\n    const value = this.state.selectedTab;\n\n    const onChange = (event, newValue) => {\n      this.setState({ selectedTab: newValue });\n    };\n\n    return (\n      <div className={controlsPanel}>\n        <Toolbar>\n          <Tabs value={value} onChange={onChange}>\n            <Tab label=\"Labels\" />\n            <Tab label=\"Shortcuts\" />\n            <Tab label=\"Search\" />\n          </Tabs>\n        </Toolbar>\n        <TabPanel className={controlTab} value={value} index={0}>\n          Item one\n        </TabPanel>\n        <TabPanel className={controlTab} value={value} index={1}>\n          Item two\n        </TabPanel>\n        <TabPanel className={controlTab} value={value} index={2}>\n          Item three\n        </TabPanel>\n      </div>\n    );\n  }\n}\n\n/**\n * Navigation bar at the top of the site. This doesn't serve any functiona purpose at\n * the moment.\n */\nclass NavigationBar extends React.Component {\n  render() {\n    const { title } = this.props.styles;\n    return (\n      <AppBar position=\"static\">\n        <Toolbar>\n          <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\n            <MenuIcon />\n          </IconButton>\n          <Typography variant=\"h6\" className={title}>\n            Clipfics\n          </Typography>\n        </Toolbar>\n      </AppBar>\n    );\n  }\n}\n\n/**\n * Button to load a story file into the StoryPanel.\n */\nclass FileImport extends React.Component {\n  render() {\n    const { storyButton } = this.props.styles;\n\n    const loadStory = event => {\n      const reader = new FileReader();\n      reader.onload = e => {\n        const html = e.target.result;\n        const container = document.getElementById(\"StoryPanel\");\n        container.innerHTML = html;\n      };\n      reader.readAsText(event.target.files[0]);\n    };\n\n    return (\n      <div>\n        <input\n          id=\"raised-button-file\"\n          type=\"file\"\n          style={{ display: \"none\" }}\n          onChange={loadStory}\n        />\n        <label htmlFor=\"raised-button-file\">\n          <Button variant=\"contained\" component=\"span\" className={storyButton}>\n            New story\n          </Button>\n        </label>\n      </div>\n    );\n  }\n}\n\n/**\n * Button to export a labeled story file, which is not what it does at the moment.\n * This currently highlights the selected text. Note that this will highlight ANY\n * text selected on the page, not just story text.\n */\nclass FileExport extends React.Component {\n  render() {\n    const { storyButton } = this.props.styles;\n    return (\n      <Button className={storyButton} onClick={highlightSelection}>\n        Highlight\n      </Button>\n    );\n  }\n}\n\n/**\n * Main app.\n */\nconst App = () => {\n  const styles = useStyles(theme);\n  const { app, main } = styles;\n\n  return (\n    <div id=\"app\" className={app}>\n      <NavigationBar styles={styles} />\n      <Grid container className={main} spacing={2}>\n        <Grid item xs={7}>\n          <StoryPanel id=\"StoryPanel\" styles={styles} />\n        </Grid>\n        <Grid item xs={5}>\n          <ControlsPanel styles={styles} />\n          <Grid container>\n            <FileImport styles={styles} />\n            <FileExport styles={styles} />\n          </Grid>\n        </Grid>\n      </Grid>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}